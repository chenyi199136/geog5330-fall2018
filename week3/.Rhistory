LubbockBlock<-readOGR("./Data", "LubbockBlockNew") #read polygon shapefile
x <- c("sp", "rgdal", "rgeos", "maptools", "classInt", "RColorBrewer", "GISTools", "maps", "raster", 'ggmap')
lapply(x, library, character.only = TRUE) #load the required packages
LubbockBlock<-readOGR("./Data", "LubbockBlockNew") #read polygon shapefile
head(LubbockBlock)
LubbockBlock<-readOGR("./Data/texas", "Tx_CntyBndry_Jurisdictional_STRATMAP") #read polygon shapefile
TexasCounties<-readOGR("./Data/texas", "Tx_CntyBndry_Jurisdictional_STRATMAP") #read polygon shapefile
head(TexasCounties)
plot(TexasCounties)
plot(TexasCounties[TexasCounties$Name=='Dallam',])
plot(TexasCounties[TexasCounties$Name=='Dallam',])
test=TexasCounties[TexasCounties$Name == 'Dallam',]
test
plot(test)
str(test)
head(TexasCounties)
test=TexasCounties[TexasCounties$NAME == 'Dallam',]
test=TexasCounties[TexasCounties$NAME=='Dallam',]
test=TexasCounties[TexasCounties$COUNTY_CAP=='Dallam',]
test=TexasCounties[TexasCounties$FIPSSTCO>48200,]
test=TexasCounties[TexasCounties$Shape_Leng>2,]
plot(test)
str(test)
bears <- read.csv("Data/bear-sightings.csv")
bears
head(bears)
coordinates(bears) <- c("longitude", "latitude")
parks <- readOGR("Data", "10m_us_parks_area")
proj4string(bears) <- proj4string(parks)
plot(parks)
points(bears, col='red')
plot(parks, axe=TRUE)
points(bears, col='red')
plot(parks, axe=TRUE, xlim=c(130, 170), ylim=c(50, 70))
plot(parks, axe=TRUE, xlim=c(-170, -130), ylim=c(50, 70))
points(bears, col='red')
plot(parks, axe=TRUE, xlim=c(-170, -130), ylim=c(50, 70), pch=19)
points(bears, col='red', pch=19)
points(bears, col='red', pch='+')
plot(parks, axe=TRUE, xlim=c(-170, -130), ylim=c(50, 70), pch=19)
points(bears, col='red', pch='+')
?over
class(parks)
test=over(bears, as(parks,'SpatialPolygons'))
test
class(test)
over(bears,parks)
head(parks)
parkbear = over(bears,parks)
summary(parkbear)
head(parkbear)
class(bears)
names(bears)
parkbear = over(bears,parks)
nrow(parkbear)
nrow(bears)
plot(parks, axe=TRUE, xlim=c(-170, -130), ylim=c(50, 70), pch=19)
data(meuse)
coordinates(meuse) = c("x", "y")
select.spatial(meuse)
test=drawExtent()
test
select(test)
select.spatial(test)
select
select()
click(extent)
click(meuse)
plot(parks, axe=TRUE, xlim=c(-170, -130), ylim=c(50, 70), pch=19)
click(parks)
?merge
plot(parks, axe=TRUE, xlim=c(-170, -130), ylim=c(50, 70), pch=19)
test=click(parks)
test
class(test)
test=drawExtent()
test
testpoly=drawPoly()
plot(parks, axe=TRUE, xlim=c(-170, -130), ylim=c(50, 70), pch=19)
testpoly=drawPoly()
testpoly2=over(parks,testpoly)
proj4string(testpoly2)=proj4string(parks)
proj4string(testpoly2)=proj4string(parks)
testpoly2
proj4string(testpoly)=proj4string(parks)
testpoly2=over(parks,testpoly)
class(testpoly)
plot(testpoly)
plot(testpoly2)
class(testpoly2)
testpoly2
# draw a map big enough to encompass all points, then add in park boundaries superimposed upon a map of the United States
plot(bears)
map("world", region="usa", add=TRUE)
plot(parks, border="green", add=TRUE)
legend("topright", cex=0.85, c("Bear in park", "Bear not in park", "Park boundary"), pch=c(16, 1, NA), lty=c(NA, NA, 1), col=c("red", "grey", "green"), bty="n")
title(expression(paste(italic("Ursus arctos"), " sightings with respect to national parks")))
plot(parks, border="green", add=TRUE)
plot(bears)
map("world", region="usa", add=TRUE)
bears <- read.csv("Data/bear-sightings.csv")
coordinates(bears) <- c("longitude", "latitude")
# read in National Parks polygons
parks <- readOGR("Data", "10m_us_parks_area")
# tell R that bear coordinates are in the same lat/lon reference system as the parks data
proj4string(bears) <- proj4string(parks)
# combine is.na() with over() to do the containment test; note that we
# need to "demote" parks to a SpatialPolygons object first
inside.park <- !is.na(over(bears, as(parks, "SpatialPolygons")))
# calculate what fraction of sightings were inside a park
mean(inside.park)
## [1] 0.1720648
# determine which park contains each sighting and store the park name as an attribute of the bears data
bears$park <- over(bears, parks)$Unit_Name
# draw a map big enough to encompass all points, then add in park boundaries superimposed upon a map of the United States
plot(bears)
map("world", region="usa", add=TRUE)
plot(parks, border="green", add=TRUE)
legend("topright", cex=0.85, c("Bear in park", "Bear not in park", "Park boundary"), pch=c(16, 1, NA), lty=c(NA, NA, 1), col=c("red", "grey", "green"), bty="n")
title(expression(paste(italic("Ursus arctos"), " sightings with respect to national parks")))
# plot bear points with separate colors inside and outside of parks
points(bears[!inside.park, ], pch=1, col="gray")
points(bears[inside.park, ], pch=16, col="red")
dev.off()
dev.off()
dev.off()
test = over(bears, parks)
test
head(test)
head(bears)
nrow(test)
nrow(parks)
nrow(over(bears, parks)$Unit_Name)
class(over(bears, parks)$Unit_Name)
class(over(bears, parks))
nrow(over(bears, parks))
bears
nrow(bears)
elevation <- getData("alt", country = "ESP")
?getData
tmin=getData('worldclim', var='tmin', res=10)
class(tmin)
str(tmin)
tmin[,1]
plot(tmin[,1])
plot(tmin$tmin1)
plot(tmin$tmin2)
plot(tmin$tmin10)
diff=tmin$tmin1 - tim$tmin10
tmin=getData('worldclim', var='tmin', res=10)
diff=tmin$tmin1 - tmin$tmin10
class(didff)
class(diff)
?overlay
TexasCounties<-readOGR("./Data/texas", "Tx_CntyBndry_Jurisdictional_STRATMAP") #read polygon shapefile
TexasCounties<-readOGR("./Data/texas", "Tx_CntyBndry_Jurisdictional_STRATMAP") #read polygon shapefile
plot(TexasCounties[TexasCounties$Shape_Leng>4,])
TexasCounties<-readOGR("./Data", "LubbockBlockNew") #read polygon shapefile
plot(TexasCounties[TexasCounties$Shape_Leng>4,])
rm(list=ls())
TexasCounties<-readOGR("./Data", "LubbockBlockNew") #read polygon shapefile
LubbockBlock<-readOGR("./Data", "LubbockBlockNew") #read polygon shapefile
head(LubbockBlock)
LubbockBlock<-readOGR("./Data", "LubbockBlockNew") #read polygon shapefile
plot(TexasCounties[LubbockBlock$Pop2010>500,])
dev.off()
dev.off();
plot(TexasCounties[LubbockBlock$Pop2010>500,])
plot(LubbockBlock[LubbockBlock$Pop2010>500,])
test=(LubbockBlock[LubbockBlock$Pop2010>500,])
test
test=(LubbockBlock[LubbockBlock$Pop2010>5000,])
nrow(test)
test=(LubbockBlock[LubbockBlock$Pop2010>1000,])
nrow(test)
plot(test)
selected = click(LubbockBlock)
selected
plot(LubbockBlock[LubbockBlock$Pop2010>500,])
dev.off();
plot(LubbockBlock[LubbockBlock$Pop2010>500,])
extent = drawExtent()
plot(LubbockBlock[LubbockBlock$Pop2010>500,])
LubbockBlock<-readOGR("./Data", "LubbockBlockNew") #read polygon shapefile
plot(LubbockBlock[LubbockBlock$Pop2010>500,])
plot(LubbockBlock[LubbockBlock$Pop2010>500,])
selected = click(LubbockBlock)
extent = drawExtent()
extent
?erase
plot(LubbockBlock[LubbockBlock$Pop2010>500,])
selection = LubbockBlock[LubbockBlock$Pop2010>500,]
plot(selection)
plot(erase(selection, extent))
erase(selection, extent)
?erase
erase(as(selection,'SpatialPolygons'), extent)
erase(as(selection,'SpatialPolygons'), as(extent,'SpatialPolygons')
)
extent = drawExtent()
proj4string(extent)=proj4string(selection)
proj4string(extent)=proj4string(selection)
proj4string(extent)
proj4string(selection)
class(extent)
extent=as(extent,'SpatialPolygons')
proj4string(extent)=proj4string(selection)
plot(erase(selection, extent))
?getData
elevation <- getData("alt", country = "ESP")
slope <- terrain(elevation, opt = "slope")
aspect <- terrain(elevation, opt = "aspect")
hill <- hillShade(slope, aspect, 40, 270)
plot(hill, col = grey(0:100/100), legend = FALSE, main = "Spain")
plot(elevation, col = rainbow(25, alpha = 0.35), add = TRUE)
plot(hill, col = grey(0:100/100), legend = FALSE, main = "Spain")
plot(elevation, col = rainbow(25, alpha = 0.35), add = TRUE)
contour(elevation)
?crop
plot(LubbockBlock)
poly = drawPoly()
poly
crop(LubbockBlock,poly)
proj4string(poly) = proj4string(LubbockBlock)
crop(LubbockBlock,poly)
test=crop(LubbockBlock,poly)
plot(test)
