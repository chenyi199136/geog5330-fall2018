{
    "collab_server" : "",
    "contents" : "--\ntitle: \"Week 3: Use R as GIS\"\noutput: github_document\n---\n\n```{r global_options, results='asis', warning=FALSE}\nknitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/',  warning=FALSE, message=FALSE)\n```\n\n```{r load, echo=F, eval=T}\n#rm(list=ls())\nx <- c(\"sp\", \"rgdal\", \"rgeos\", \"maptools\", \"classInt\", \"RColorBrewer\", \"GISTools\", \"maps\", \"raster\", 'ggmap')\n#install.packages(x) # warning: this may take a number of minutes\nlapply(x, library, character.only = TRUE) #load the required packages\n```\n\n# Spatial Objects\n\n|       |  Without attributes | With attributes |\n| ----- | ------------------  | --------------  |\n|Points |  SpatialPoints      | SpatialPointsDataFrame|\n|Lines |  SpatialLines      | SpatialLinesDataFrame|\n|Polygons |  SpatialPolygons      | SpatialPolygonsDataFrame|\n|Raster |  SpatialGrid      | SpatialGridDataFrame|\n|Raster |  SpatialPixels      | SpatialPixelsDataFrame|\n\n```{r load_library, echo=T, eval=T}\nLubbockBlock<-readShapePoly(\"Data/LubbockBlockNew.shp\") #read polygon shapefile\nclass(LubbockBlock)\nHouseLocation<-read.csv(\"Data/HouseLatLon.csv\") #read GPS data\nclass(HouseLocation)\ncoordinates(HouseLocation)<-c('Lon', 'Lat')\nclass(HouseLocation)\ncropland<-raster(\"Data/Lubbock_CDL_2013_USDA.tif\")\nclass(cropland)\n\ntmin <- getData(\"worldclim\", var = \"tmin\", res = 10)  # this will download \nclass(tmin)\n```\n\n\n```{r load_library1, echo=T, eval=T}\nLubbockBlock<-readOGR(\"./Data\", \"LubbockBlockNew\") #read polygon shapefile\nclass(LubbockBlock)\n```\n\n\n# Mapping with R\n\n## Basic Mapping\n\n```{r mapping, echo=T, eval=T}\nLubbockBlock<-readShapePoly(\"Data/LubbockBlockNew.shp\") #read polygon shapefile\nplot(LubbockBlock,axes=TRUE, col=alpha(\"gray70\", 0.6)) #plot Lubbock block shapefile\n#add title, scalebar, north arrow, and legend\nHouseLocation<-read.csv(\"Data/HouseLatLon.csv\") #read GPS data\nprice<-HouseLocation$TotalPrice\nnclr<-5\npriceclr<-brewer.pal(nclr, \"Reds\")\nclass<-classIntervals(price, nclr, style=\"quantile\")\nclocode<-findColours(class, priceclr)\n\npoints(HouseLocation$Lon, HouseLocation$Lat, pch=19, col=clocode, cex=0.5) #add houses on top of Lubbock block shapefile\ntitle(main=\"Houses on Sale in Lubbock, 2014\") \n\nlegend(-101.95, 33.65, legend=names(attr(clocode, \"table\")), fill =attr(clocode, \"palette\"), cex=0.5, bty=\"n\")\n#map.scale(x=-101.85, y=33.49,0.001,\"Miles\",4,0.5,sfcol='red')\nnorth.arrow(xb=-101.95, yb=33.65, len=0.005, lab=\"N\")\n\n#plot raster\nplot(cropland)\n#plot raster stack\ntmin <- getData(\"worldclim\", var = \"tmin\", res = 10)  # this will download \nplot(tmin)\n```\n\n## Mapping with static Google Maps\n\n```{R mapping2, echo=T, eval=T}\nlibrary(RgoogleMaps)\nlubbock=geocode('lubbock')\n\nnewmap <- GetMap(center = c(lubbock$lat, lubbock$lon), zoom = 12, destfile = \"newmap.png\", maptype = \"roadmap\") \n\nPlotOnStaticMap(newmap, lat=HouseLocation$Lat, lon=HouseLocation$Lon, col='red')\nlubbock<-SpatialPolygons(LubbockBlock@polygons, proj4string=CRS(\"+init=EPSG:4326\"))\nPlotPolysOnStaticMap(newmap, lubbock, col=alpha('blue', 0.2))\n```\n\n## Mapping with dynamic Google Maps\n\n```{R mapping3, echo=T, eval=F}\nlibrary(plotGoogleMaps)\n\ndata(meuse)\ncoordinates(meuse)=~x+y\nproj4string(meuse) = CRS('+init=epsg:28992')\nplotGoogleMaps(meuse, filename='meuse.html')\n\nHouseLocation<-read.csv(\"Data/HouseLatLon.csv\") #read GPS data\ncoordinates(HouseLocation)<-c('Lon', 'Lat')\nproj4string(HouseLocation)=CRS('+init=EPSG:4326')\nplotGoogleMaps(HouseLocation, filename='house.html')\n\nic = iconlabels(meuse$zinc, height=12)\nplotGoogleMaps(meuse, iconMarker=ic, mapTypeId='ROADMAP', filename='meuse2.html')\n\n#plot raster\ndata(meuse.grid)\ncoordinates(meuse.grid)<-c('x', 'y')\nmeuse.grid<-as(meuse.grid, 'SpatialPixelsDataFrame')\nproj4string(meuse.grid) <- CRS('+init=epsg:28992')\nmapMeuseCl<- plotGoogleMaps(meuse.grid,zcol= 'dist',at=seq(0,0.9,0.1),colPalette= brewer.pal(9,\"Reds\"), filename='meuse3.html') \n\n#plot polygons\nproj4string(LubbockBlock)=CRS(\"+init=epsg:4326\")\nm<-plotGoogleMaps(LubbockBlock,zcol=\"Pop2010\",filename= 'MyMap6.htm' , mapTypeId= ' TERRAIN ' ,colPalette= brewer.pal(7,\"Reds\"), strokeColor=\"white\")\n\n#plot line\nmeuse.grid<-as(meuse.grid, 'SpatialPixelsDataFrame')\nim<-as.image.SpatialGridDataFrame(meuse.grid[ 'dist' ]) \ncl<-ContourLines2SLDF(contourLines(im))\nproj4string(cl) <- CRS( '+init=epsg:28992')\nmapMeuseCl<- plotGoogleMaps(cl,zcol= 'level' ,strokeWeight=1:9, filename= 'myMap6.htm',mapTypeId= 'ROADMAP') \n\n```\n\n## Changing map projections\n\n```{r projection, eval=T }\n\n#project a vector \n\nboudary=readShapePoly('Data/boundary');\nproj4string(boudary) <-CRS(\"+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0\")\nproj4string(boudary)\nboudaryProj<-spTransform(boudary, CRS(\"+init=epsg:3857\"))\nproj4string(boudaryProj)\n\n\n#project a raster\nproj4string(cropland)\nplot(cropland)\naea <- CRS(\"+init=ESRI:102003\")   #Albert equal area\nprojCropland=projectRaster(cropland, crs=aea)\nplot(projCropland)\n```\n\n# Spatial analysis with R\n\n```{r load_library1, echo=T, eval=T}\n\n#subsetting a spatial dataframe\nLubbockBlock<-readOGR(\"./Data\", \"LubbockBlockNew\") #read polygon shapefile\n\nselection = LubbockBlock[LubbockBlock$Pop2010>500,]\nplot(selection)\n\n#select by clicking\nselected = click(LubbockBlock)\n\nextent = drawExtent()\n\nextent=as(extent,'SpatialPolygons')\nproj4string(extent)=proj4string(selection)\n\n# performace erase \nplot(erase(selection, extent))\n\n\npoly = drawPoly()\nproj4string(poly) = proj4string(LubbockBlock)\n\n# performe clip\ncropselection = crop(LubbockBlock,poly)\nplot(cropselection)\n\n```\n## vector analysis (overlay)\n\n```{r vector, echo=T, eval=T }\n#project a vector \n\n# Datasets\n#  * CSV table of (fictionalized) brown bear sightings in Alaska, each\n#    containing an arbitrary ID and spatial location specified as a\n#    lat-lon coordinate pair. \n#  * Polygon shapefile containing the boundaries of US National Parks\n#    greater than 100,000 acres in size. \n\nbears <- read.csv(\"Data/bear-sightings.csv\")\ncoordinates(bears) <- c(\"longitude\", \"latitude\")\n\n# read in National Parks polygons\nparks <- readOGR(\"Data\", \"10m_us_parks_area\")\n\n# tell R that bear coordinates are in the same lat/lon reference system as the parks data \nproj4string(bears) <- proj4string(parks)\n\n# combine is.na() with over() to do the containment test; note that we\n# need to \"demote\" parks to a SpatialPolygons object first\ninside.park <- !is.na(over(bears, as(parks, \"SpatialPolygons\")))\n\n# calculate what fraction of sightings were inside a park\nmean(inside.park)\n## [1] 0.1720648\n\n# determine which park contains each sighting and store the park name as an attribute of the bears data\nbears$park <- over(bears, parks)$Unit_Name\n\n# draw a map big enough to encompass all points, then add in park boundaries superimposed upon a map of the United States\nplot(bears)\nmap(\"world\", region=\"usa\", add=TRUE)\nplot(parks, border=\"green\", add=TRUE)\nlegend(\"topright\", cex=0.85, c(\"Bear in park\", \"Bear not in park\", \"Park boundary\"), pch=c(16, 1, NA), lty=c(NA, NA, 1), col=c(\"red\", \"grey\", \"green\"), bty=\"n\")\ntitle(expression(paste(italic(\"Ursus arctos\"), \" sightings with respect to national parks\"))) \n\n# plot bear points with separate colors inside and outside of parks\npoints(bears[!inside.park, ], pch=1, col=\"gray\")\npoints(bears[inside.park, ], pch=16, col=\"red\")\n\n# write the augmented bears dataset to CSV\nwrite.csv(bears, \"bears-by-park.csv\", row.names=FALSE)\n\n# ...or create a shapefile from the points\nwriteOGR(bears, \".\", \"bears-by-park\", driver=\"ESRI Shapefile\")\n```\n\n## Raster analysis\n\n```{r raster, eval=T, echo=T}\n\ntmin=getData('worldclim', var='tmin', res=10)\n\n# Raster calculator\ndiff=tmin$tmin1 - tmin$tmin10\n\n## the following code is faster for large datasets. \noverlay(tmin$tmin1, tmin$tmin10, fun=function(x,y){return (x-y)})\n\nelevation <- getData(\"alt\", country = \"ESP\")\nslope <- terrain(elevation, opt = \"slope\")\naspect <- terrain(elevation, opt = \"aspect\")\nhill <- hillShade(slope, aspect, 40, 270)\nplot(hill, col = grey(0:100/100), legend = FALSE, main = \"Spain\")\nplot(elevation, col = rainbow(25, alpha = 0.35), add = TRUE)\n\n#contours\n\ncontour(elevation)\n```\n\n```{r raster2, eval=F, echo=T}\n#crop raster\nplot(hill, col = grey(0:100/100), legend = FALSE, main = \"Spain\")\nplot(elevation, col = rainbow(25, alpha = 0.35), add = TRUE)\nextent=drawExtent()\ncropElev <- crop(elevation, extent)\nplot(cropElev)\n```\n",
    "created" : 1505855107493.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3143255427",
    "id" : "F8480E3",
    "lastKnownWriteTime" : 1505860117,
    "last_content_update" : 1505860117096,
    "path" : "~/Git/hub/geog5330-fall2017/week3/gis.Rmd",
    "project_path" : "gis.Rmd",
    "properties" : {
        "marks" : "<:170,16\n>:170,17"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}