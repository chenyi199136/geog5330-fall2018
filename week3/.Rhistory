q();
q();
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/',  warning=FALSE, message=FALSE)
install.packages('knitr')
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/',  warning=FALSE, message=FALSE)
cd
pwd
??circles
exit
q();
exit
devtools::install_github("rstudio/rmarkdown")
install.packages(c("ade4", "adehabitatLT", "adehabitatMA", "backports", "BH", "boot", "caTools", "checkmate", "CircStats", "classInt", "cluster", "curl", "data.table", "deldir", "devtools", "digest", "doParallel", "dtw", "e1071", "evaluate", "fda", "fields", "FNN", "foreach", "forecast", "foreign", "Formula", "gdalUtils", "geoR", "geosphere", "ggplot2", "git2r", "gmodels", "gstat", "gtools", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "hydroGOF", "hydroTSM", "igraph", "irlba", "iterators", "knitr", "lattice", "lazyeval", "LearnBayes", "lmtest", "magic", "mapdata", "mapproj", "maps", "maptools", "MASS", "Matrix", "mgcv", "munsell", "mvtnorm", "openssl", "pgirmess", "pkgconfig", "polyclip", "quantmod", "R.oo", "R.utils", "Rcpp", "RcppArmadillo", "reshape", "reshape2", "rgdal", "rgeos", "RgoogleMaps", "rJava", "rjson", "rlang", "rpart", "rprojroot", "sandwich", "scales", "shiny", "sourcetools", "sp", "spacetime", "spam", "spatstat", "spatstat.data", "spatstat.utils", "spBayes", "spData", "spdep", "stringi", "stringr", "survival", "tibble", "timeDate", "tinytex", "tkrplot", "tseries", "TTR", "viridis", "viridisLite", "withr", "xtable", "xts", "yaml", "zoo"))
?rmarkdown::render
pwd
getwd()
ls()
?render
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
unlink('Git/hub/geog5330-fall2018/week2/Part2-RMarkdown_cache', recursive = TRUE)
library(rmarkdown)
pwd
getwd()
setwd("~/Git/hub/geog5330-fall2018/week3")
#subsetting a spatial dataframe
LubbockBlock<-readOGR("./Data", "LubbockBlockNew") #read polygon shapefile
#rm(list=ls())
x <- c("sp", "rgdal", "rgeos", "maptools", "classInt", "RColorBrewer", "GISTools", "maps", "raster", 'ggmap')
#install.packages(x) # warning: this may take a number of minutes
lapply(x, library, character.only = TRUE) #load the required packages
LubbockBlock<-readOGR("./Data", "LubbockBlockNew") #read polygon shapefile
library(rgdal)
#subsetting a spatial dataframe
LubbockBlock<-readOGR("./Data", "LubbockBlockNew") #read polygon shapefile
#subsetting a spatial dataframe
LubbockBlock<-readOGR("./Data", "LubbockBlockNew") #read polygon shapefile
selection = LubbockBlock[LubbockBlock$Pop2010>500,]
library(rgdal)
#subsetting a spatial dataframe
LubbockBlock<-readOGR("./Data", "LubbockBlockNew") #read polygon shapefile
selection = LubbockBlock[LubbockBlock$Pop2010>500,]
plot(selection)
#select by clicking
selected = click(LubbockBlock)
extent = drawExtent()
extent=as(extent,'SpatialPolygons')
proj4string(extent)=proj4string(selection)
# performace erase
plot(erase(selection, extent))
poly = drawPoly()
proj4string(poly) = proj4string(LubbockBlock)
# performe clip
cropselection = crop(LubbockBlock,poly)
plot(cropselection)
library(plotGoogleMaps)
data(meuse)
coordinates(meuse)=~x+y
proj4string(meuse) = CRS('+init=epsg:28992')
plotGoogleMaps(meuse, filename='meuse.html')
HouseLocation<-read.csv("Data/HouseLatLon.csv") #read GPS data
coordinates(HouseLocation)<-c('Lon', 'Lat')
proj4string(HouseLocation)=CRS('+init=EPSG:4326')
plotGoogleMaps(HouseLocation, filename='house.html')
ic = iconlabels(meuse$zinc, height=12)
plotGoogleMaps(meuse, iconMarker=ic, mapTypeId='ROADMAP', filename='meuse2.html')
#plot raster
data(meuse.grid)
coordinates(meuse.grid)<-c('x', 'y')
meuse.grid<-as(meuse.grid, 'SpatialPixelsDataFrame')
proj4string(meuse.grid) <- CRS('+init=epsg:28992')
mapMeuseCl<- plotGoogleMaps(meuse.grid,zcol= 'dist',at=seq(0,0.9,0.1),colPalette= brewer.pal(9,"Reds"), filename='meuse3.html')
#plot polygons
proj4string(LubbockBlock)=CRS("+init=epsg:4326")
m<-plotGoogleMaps(LubbockBlock,zcol="Pop2010",filename= 'MyMap6.htm' , mapTypeId= ' TERRAIN ' ,colPalette= brewer.pal(7,"Reds"), strokeColor="white")
#plot line
meuse.grid<-as(meuse.grid, 'SpatialPixelsDataFrame')
im<-as.image.SpatialGridDataFrame(meuse.grid[ 'dist' ])
cl<-ContourLines2SLDF(contourLines(im))
proj4string(cl) <- CRS( '+init=epsg:28992')
mapMeuseCl<- plotGoogleMaps(cl,zcol= 'level' ,strokeWeight=1:9, filename= 'myMap6.htm',mapTypeId= 'ROADMAP')
library(RgoogleMaps)
lubbock=geocode('lubbock')
newmap <- GetMap(center = c(lubbock$lat, lubbock$lon), zoom = 12, destfile = "newmap.png", maptype = "roadmap")
PlotOnStaticMap(newmap, lat=HouseLocation$Lat, lon=HouseLocation$Lon, col='red')
lubbock<-SpatialPolygons(LubbockBlock@polygons, proj4string=CRS("+init=EPSG:4326"))
PlotPolysOnStaticMap(newmap, lubbock, col=alpha('blue', 0.2))
lubbock
newmap <- GetMap(center = c(lubbock$lat, lubbock$lon), zoom = 12, destfile = "newmap.png", maptype = "roadmap")
library(RgoogleMaps)
str(lubbock)
?geocode
lubbock=geocode('lubbock', output="latlon")
lubbock
newmap <- GetMap(center = c(lubbock$lat, lubbock$lon), zoom = 12, destfile = "newmap.png", maptype = "roadmap")
PlotOnStaticMap(newmap, lat=HouseLocation$Lat, lon=HouseLocation$Lon, col='red')
lubbock<-SpatialPolygons(LubbockBlock@polygons, proj4string=CRS("+init=EPSG:4326"))
PlotPolysOnStaticMap(newmap, lubbock, col=alpha('blue', 0.2))
newmap <- GetMap(center = c(lubbock$lat, lubbock$lon), zoom = 12, destfile = "newmap.png", maptype = "roadmap")
PlotOnStaticMap(newmap, lat=HouseLocation$Lat, lon=HouseLocation$Lon, col='red')
lubbock<-SpatialPolygons(LubbockBlock@polygons, proj4string=CRS("+init=EPSG:4326"))
PlotPolysOnStaticMap(newmap, lubbock, col=alpha('blue', 0.2))
PlotOnStaticMap(newmap, lat=HouseLocation$Lat, lon=HouseLocation$Lon, col='red')
newmap
newmap <- GetMap(center = c(lubbock$lat, lubbock$lon), zoom = 12, destfile = "newmap.png", maptype = "roadmap")
names(lubbock)
str(lubbock)
lubbock
library(RgoogleMaps)
lubbock=geocode('lubbock', output="latlon")
lubbock
newmap <- GetMap(center = c(lubbock$lat, lubbock$lon), zoom = 12, destfile = "newmap.png", maptype = "roadmap")
PlotOnStaticMap(newmap, lat=HouseLocation$Lat, lon=HouseLocation$Lon, col='red')
library(RgoogleMaps)
lubbock=geocode('lubbock', output="latlon")
lubbock
library(RgoogleMaps)
lubbock=geocode('lubbock', output="latlon")
lubbock
lubbock$x=1
lubbock
lubbock=c(33.583794, -101.855836)
lubbock
names(lubbock)=c('lat','lon')
lubbock
#lubbock=geocode('lubbock', output="latlon")
lubbock=c(33.583794, -101.855836)
lubbock[1]
lubbock[2]
unlink('gis_cache', recursive = TRUE)
?knitr::opts_chunk
unlink('gis_cache', recursive = TRUE)
library(rmarkdown)
ls()
dir()
?render('gis.Rmd')
render('gis.Rmd', clean=T)
render('gis.Rmd', clean=T)
unlink('gis_cache', recursive = TRUE)
ls('package:sp')
?detach
render('gis.Rmd', clean=T)
render('gis.Rmd', clean=T)
?readOGR
render('gis.Rmd', clean=T)
unlink('gis_cache', recursive = TRUE)
render('gis.Rmd', clean=T)
library(rgdal)
#subsetting a spatial dataframe
LubbockBlock<-readOGR("./Data", "LubbockBlockNew") #read polygon shapefile
plot(selection)
#select by clicking
selected = click(LubbockBlock)
extent = drawExtent()
extent=as(extent,'SpatialPolygons')
proj4string(extent)=proj4string(selection)
# performace erase
plot(erase(selection, extent))
poly = drawPoly()
proj4string(poly) = proj4string(LubbockBlock)
# performe clip
cropselection = crop(LubbockBlock,poly)
plot(cropselection)
#crop raster
plot(hill, col = grey(0:100/100), legend = FALSE, main = "Spain")
plot(elevation, col = rainbow(25, alpha = 0.35), add = TRUE)
